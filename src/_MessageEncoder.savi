:module _MessageEncoder

  :fun startup_message(user String'val, database String'val, protocol_version = U32[3].bit_shl(16)) Bytes'iso
    param_user = Pair(String'val).new("user", user)
    param_db = Pair(String'val).new("database", database)
    --@_startup_message([param_user, param_db], protocol_version)

  :fun _startup_message(params Array(Pair(String'val)), protocol_version U32) Bytes'iso
    len USize = USize[4] + 4
    params.each -> (pair |
      len = len + pair.first.size + 1 + pair.second.size + 1
    )
    len = len + 1

    msg = Bytes.new_iso(len)
    msg.push_native_u32(len.u32.native_to_be)
    msg.push_native_u32(protocol_version.native_to_be)

    params.each -> (pair |
      msg << pair.first.as_bytes
      msg.push(0)
      msg << pair.second.as_bytes
      msg.push(0)
    )
    msg.push(0)
    --msg

  :fun query_message(query String'val) Bytes'iso
    len USize = USize[4] + query.size + 1
    msg = Bytes.new_iso(len)
    msg.push('Q')
    msg.push_native_u32(len.u32.native_to_be)
    msg << query.as_bytes
    msg.push(0)
    --msg
